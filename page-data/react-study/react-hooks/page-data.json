{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/react-study/react-hooks/",
    "result": {"data":{"cur":{"id":"2a7ae4d9-bc22-5a39-920c-8b0f8d541cb5","html":"<h1 id=\"보류-상태\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%A5%98-%EC%83%81%ED%83%9C\" aria-label=\"보류 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보류 상태</h1>\n<h2 id=\"1\" style=\"position:relative;\"><a href=\"#1\" aria-label=\"1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h2>\n<!-- # [노마드코더 - 실전형 리액트 Hooks 10개](https://nomadcoders.co/react-hooks-introduction/lobby)\r\n\r\n## What is Firebase? \r\n  \r\n## 노트\r\n### 1. useEffect 이용한 create, destroy \r\n* Component가 생성될 때 코드 실행(create) 및 파괴될 때 코드 실행(destroy) \r\n```javascript\r\n  useEffect(() => {\r\n    console.log(\"created :)\");\r\n    return () => console.log(\"destroy :(\");\r\n  });\r\n```\r\n\r\n```javascript\r\n  function destroyFn() {\r\n    console.log(\"destroy :(\");\r\n  }\r\n  function createFn() {\r\n    console.log(\"created :)\");\r\n    return destroyFn;\r\n  }\r\n  useEffect(createFn, []);\r\n\r\n```\r\n\r\n<br/>\r\n\r\n### 2. API 사용법 \r\n* ajax & coin API 사용 \r\n>문제점\r\n**`fetch(\"https://api.coinpaprika.com/v1/tickers\")`로 가져온 데이터가 6000 몇개 쯤? 되는데**\r\n**데이터를 천개 정도까지 잘라서 입력했을 때 USD-> 선택된 Coin 수량 변경시 잘되는데 2천개정도부터**\r\n**버벅이는 현상이 나타남. 정확한 원인은 아직 모르겠으나 숫자를 입력했을 때 onchange 이벤트가 계속 발생하여** \r\n**그 속도가 6천개의 데이터를 그려주는 속도보다 빨라서 버벅이는걸로 예상이됨.**\r\n[소스참조](https://github.com/wjdrbdyd/movie-web/coin-exam)\r\n> 예상 해결 방안 \r\n- 1. 페이징을 사용하여 데이터를 나눠서 렌더링 하는 방법.\r\n- 2. 스크롤위치에 따라 데이터를 나눠서 렌더링 하는 방법.\r\n- 3. input 입력시 onChange발생하여 setMoney를 실행할 때 setTimeout을 줘서 렌더링 시간에 격차를 두는방법.\r\n\r\n<br/>\r\n\r\n### 3. fetch & async-await \r\n> fetch\r\n```javascript\r\nfetch(\r\n  \"https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year\"\r\n)\r\n.then((response) => response.json())\r\n.then((json) => {\r\n  setMovies(json.data.movies);\r\n  setLoading(false);\r\n});\r\n```\r\n> async-await \r\n```javascript\r\nconst getMovies = async() => {\r\n  const response = await fetch(\r\n    \"https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year\"\r\n  );\r\n  const json = await response.json();\r\n  setMovies(json.data.movies);\r\n  setLoading(false);\r\n}\r\n```\r\n### 4. Movie Component props 전달시 에러\r\n* `Uncaught TypeError: Cannot read properties of undefined` 에러 발생\r\n* 발생지점 `genre` 부분 map 함수 undefined\r\n**제공하는 API의 `genre`의 속성이 없는 데이터 존재** \r\n\r\n* 컴포넌트안에서 `genre` 유무를 체크하니 props 전달시 propTypes 설정해놔서 Script Error발생 함 \r\n**그래서 부모컴포넌트에서 genres가 없을 경우 빈 Array 전달하도록 변경**\r\n> 해결\r\n```javascript\r\n Movie.propTypes = {\r\n  ...\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired // genres의 Type 설정 부분\r\n};\r\n // 문제의 부분\r\n <Movie key={movie.id}coverImg={movie.medium_cover_image} title={movie.title} summary={movie.summary} \r\n `genres={movie.genres}` /> \r\n \r\n // 문제 부분 수정\r\n <Movie key={movie.id}coverImg={movie.medium_cover_image} title={movie.title} summary={movie.summary} \r\n `genres={movie.genres ? movie.genres: []}` /> \r\n```\r\n[소스참조](https://github.com/wjdrbdyd/movie-web)\r\n\r\n### 5.깃페이지 배포시 빈화면 문제\r\n**작년 11월경 혼자 리액트를 공부해서 간단한 프로젝트를 배포했을 때 사이트를 들어가면 빈 화면으로 출력되는 문제를 겪었었다.**\r\n**아무리 찾아봐도 당시에는 커뮤니티 활동도 안하고 구글링 열심히 검색해서 혼자의 힘으로 해결하려 했었으나 실패.. 그때 아마 리액트**\r\n**개인 프로젝트를 만들다가 잠깐 Stop했던 기억이.. 운좋게 이번에 이 노마드 강의를 들으며 강의의 댓글로 인해 원인은 알게 되었다.**\r\n> 문제가 됬던 부분 `React-Router-Dom v6.` 사용\r\n```jsx\r\n// v6 이전\r\n<Router>\r\n  <Switch>\r\n    <Route path=\"/movie/:id\"><Detail/></Route>\r\n    <Route path=\"/\"><Home/></Route>\r\n  </Switch>\r\n</Router>\r\n// 라우터 v6\r\n<Router>\r\n  <Routes>\r\n    <Route path=\"/movie/:id\" element={<Detail />}></Route>\r\n    <Route path=\"/\" element={<Home />}></Route>\r\n  </Routes>\r\n</Router>\r\n```\r\n**위 소스코드에서 `<Router>`  부분에 `basename={process.env.PUBLIC_URL}` 을 추가하면 빈 화면 증상을 해결할 수 있다.**\r\n**무슨의미인지는 아직 찾아보지 않았음. `process.env.PULBIC_URL` 을 콘솔로 출력해보면 프로젝트 루트 폴더명이 나오는데**\r\n**v6 버전부터 저부분을 추가해야 루트 경로를 잡을 수 있는 듯한??.. 추후 내용을 찾아보고 해당 글에 추가할 예정!**\r\n<br/> -->\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1\">1.</a></li>\n</ul>\n</div>","excerpt":"보류 상태 1. React 1.","frontmatter":{"date":"January 30, 2022","title":"[React] 리액트 Hooks#1","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-hooks/"}},"next":{"id":"3e42d18e-e4d0-5539-8efb-de900316f1d3","html":"<h1 id=\"보류\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%A5%98\" aria-label=\"보류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보류</h1>\n<h1 id=\"노마드코더---트위터-클론코딩\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---%ED%8A%B8%EC%9C%84%ED%84%B0-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9\" aria-label=\"노마드코더   트위터 클론코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/nwitter/lobby\">노마드코더 - 트위터 클론코딩</a></h1>\n<h2 id=\"1\" style=\"position:relative;\"><a href=\"#1\" aria-label=\"1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.</h2>\n<!-- ## What is Firebase? \r\n  \r\n## 노트\r\n### 1. useEffect 이용한 create, destroy \r\n* Component가 생성될 때 코드 실행(create) 및 파괴될 때 코드 실행(destroy) \r\n```javascript\r\n  useEffect(() => {\r\n    console.log(\"created :)\");\r\n    return () => console.log(\"destroy :(\");\r\n  });\r\n```\r\n\r\n```javascript\r\n  function destroyFn() {\r\n    console.log(\"destroy :(\");\r\n  }\r\n  function createFn() {\r\n    console.log(\"created :)\");\r\n    return destroyFn;\r\n  }\r\n  useEffect(createFn, []);\r\n\r\n```\r\n\r\n<br/>\r\n\r\n### 2. API 사용법 \r\n* ajax & coin API 사용 \r\n>문제점\r\n**`fetch(\"https://api.coinpaprika.com/v1/tickers\")`로 가져온 데이터가 6000 몇개 쯤? 되는데**\r\n**데이터를 천개 정도까지 잘라서 입력했을 때 USD-> 선택된 Coin 수량 변경시 잘되는데 2천개정도부터**\r\n**버벅이는 현상이 나타남. 정확한 원인은 아직 모르겠으나 숫자를 입력했을 때 onchange 이벤트가 계속 발생하여** \r\n**그 속도가 6천개의 데이터를 그려주는 속도보다 빨라서 버벅이는걸로 예상이됨.**\r\n[소스참조](https://github.com/wjdrbdyd/movie-web/coin-exam)\r\n> 예상 해결 방안 \r\n- 1. 페이징을 사용하여 데이터를 나눠서 렌더링 하는 방법.\r\n- 2. 스크롤위치에 따라 데이터를 나눠서 렌더링 하는 방법.\r\n- 3. input 입력시 onChange발생하여 setMoney를 실행할 때 setTimeout을 줘서 렌더링 시간에 격차를 두는방법.\r\n\r\n<br/>\r\n\r\n### 3. fetch & async-await \r\n> fetch\r\n```javascript\r\nfetch(\r\n  \"https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year\"\r\n)\r\n.then((response) => response.json())\r\n.then((json) => {\r\n  setMovies(json.data.movies);\r\n  setLoading(false);\r\n});\r\n```\r\n> async-await \r\n```javascript\r\nconst getMovies = async() => {\r\n  const response = await fetch(\r\n    \"https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year\"\r\n  );\r\n  const json = await response.json();\r\n  setMovies(json.data.movies);\r\n  setLoading(false);\r\n}\r\n```\r\n### 4. Movie Component props 전달시 에러\r\n* `Uncaught TypeError: Cannot read properties of undefined` 에러 발생\r\n* 발생지점 `genre` 부분 map 함수 undefined\r\n**제공하는 API의 `genre`의 속성이 없는 데이터 존재** \r\n\r\n* 컴포넌트안에서 `genre` 유무를 체크하니 props 전달시 propTypes 설정해놔서 Script Error발생 함 \r\n**그래서 부모컴포넌트에서 genres가 없을 경우 빈 Array 전달하도록 변경**\r\n> 해결\r\n```javascript\r\n Movie.propTypes = {\r\n  ...\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired // genres의 Type 설정 부분\r\n};\r\n // 문제의 부분\r\n <Movie key={movie.id}coverImg={movie.medium_cover_image} title={movie.title} summary={movie.summary} \r\n `genres={movie.genres}` /> \r\n \r\n // 문제 부분 수정\r\n <Movie key={movie.id}coverImg={movie.medium_cover_image} title={movie.title} summary={movie.summary} \r\n `genres={movie.genres ? movie.genres: []}` /> \r\n```\r\n[소스참조](https://github.com/wjdrbdyd/movie-web)\r\n\r\n### 5.깃페이지 배포시 빈화면 문제\r\n**작년 11월경 혼자 리액트를 공부해서 간단한 프로젝트를 배포했을 때 사이트를 들어가면 빈 화면으로 출력되는 문제를 겪었었다.**\r\n**아무리 찾아봐도 당시에는 커뮤니티 활동도 안하고 구글링 열심히 검색해서 혼자의 힘으로 해결하려 했었으나 실패.. 그때 아마 리액트**\r\n**개인 프로젝트를 만들다가 잠깐 Stop했던 기억이.. 운좋게 이번에 이 노마드 강의를 들으며 강의의 댓글로 인해 원인은 알게 되었다.**\r\n> 문제가 됬던 부분 `React-Router-Dom v6.` 사용\r\n```jsx\r\n// v6 이전\r\n<Router>\r\n  <Switch>\r\n    <Route path=\"/movie/:id\"><Detail/></Route>\r\n    <Route path=\"/\"><Home/></Route>\r\n  </Switch>\r\n</Router>\r\n// 라우터 v6\r\n<Router>\r\n  <Routes>\r\n    <Route path=\"/movie/:id\" element={<Detail />}></Route>\r\n    <Route path=\"/\" element={<Home />}></Route>\r\n  </Routes>\r\n</Router>\r\n```\r\n**위 소스코드에서 `<Router>`  부분에 `basename={process.env.PUBLIC_URL}` 을 추가하면 빈 화면 증상을 해결할 수 있다.**\r\n**무슨의미인지는 아직 찾아보지 않았음. `process.env.PULBIC_URL` 을 콘솔로 출력해보면 프로젝트 루트 폴더명이 나오는데**\r\n**v6 버전부터 저부분을 추가해야 루트 경로를 잡을 수 있는 듯한??.. 추후 내용을 찾아보고 해당 글에 추가할 예정!**\r\n<br/> -->\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1\">1.</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 30, 2022","title":"[React] 트위터 클론코딩#1","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/twitter-clone-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://wjdrbdyd.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/react-study/react-hooks/","nextSlug":"/react-study/twitter-clone-1/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}