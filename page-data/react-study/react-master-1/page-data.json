{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/react-study/react-master-1/",
    "result": {"data":{"cur":{"id":"8d6d8897-12fc-5501-8c6d-f92b164925e8","html":"<h1 id=\"노마드코더---react-js-마스터클래스\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---react-js-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"노마드코더   react js 마스터클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-masterclass\">노마드코더 - React JS 마스터클래스</a></h1>\n<h2 id=\"1-강의-시작\" style=\"position:relative;\"><a href=\"#1-%EA%B0%95%EC%9D%98-%EC%8B%9C%EC%9E%91\" aria-label=\"1 강의 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 강의 시작</h2>\n<p><strong>React JS 기초 강의를 듣고 Twitter Clone Coding 하려다가 어쩌다가 HTML/CSS/JS 기초 강의 다 듣고</strong>\r\n<strong>오느라 몇일 걸려서 이제 본격 React JS 마스터클래스를 시작하게 됐다.</strong><br>\n<strong>이 강의는 Section별로 각기 다른 요소를 집중적으로 배우며 섹션을 진행할 때마다 복습 및 새로운것을 배운다</strong>\r\n<strong>그리고 마지막에는 배운것을 총 동원한 작은 프로젝트를 만들게 된다.</strong></p>\n<h2 id=\"2-section-2-styled-components\" style=\"position:relative;\"><a href=\"#2-section-2-styled-components\" aria-label=\"2 section 2 styled components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Section 2. Styled Components</h2>\n<h3 id=\"2-1--22-adapting--extending\" style=\"position:relative;\"><a href=\"#2-1--22-adapting--extending\" aria-label=\"2 1  22 adapting  extending permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2-1 ~ 2.2 Adapting &#x26; Extending</h3>\n<blockquote>\n<p>styled components 설치</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> styled-components\r\n<span class=\"token punctuation\">(</span>yarn <span class=\"token function\">add</span> styled-components<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>styled components를 import해서 사용 기본적으로 태그명 뒤에 <code class=\"language-text\">\\</code>“ 기호를 사용하여</li>\n<li>그 사이에 기본 css문법과 똑같이 사용한다.</li>\n<li>컴포넌트로서 Props로 색상 같은걸 동적으로 전달 가능</li>\n<li>확장 가능</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n/* props를 받아 사용 */\r\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>bgColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; \r\n  width: 100px;\r\n  height: 100px;\r\n</span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token keyword\">const</span> Circle <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Box<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> // Box 스타일컴포넌트를 확장\r\n  border-radius: 50%;\r\n</span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>Box bgColor<span class=\"token operator\">=</span><span class=\"token string\">\"blue\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//  bgColor란 이름으로 props 전달 값은 blue</span>\r\n    <span class=\"token operator\">&lt;</span>Circle bgColor<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">//bgColor란 이름으로 props 전달 값은 red</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-3-as-and-attrs\" style=\"position:relative;\"><a href=\"#2-3-as-and-attrs\" aria-label=\"2 3 as and attrs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2-3 ‘as’ and Attrs</h3>\n<ul>\n<li>같은 스타일을 가진 다른 태그를 만들 수 있다.</li>\n<li>태그의 속성값을 지정 해줄 수 있다. 예를 들어 input tag가 모두 readonly 속성을 가질 때 각각 써주지 않고 <code class=\"language-text\">styled components</code>를 이용하여 스타일로 한번에 지정</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Btn <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n  ...\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> Input <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> /* input 태그 속성 required 지정*/\r\n  ...\r\n</span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">...</span>\r\n    <span class=\"token operator\">&lt;</span>Btn<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Btn<span class=\"token operator\">></span>  <span class=\"token comment\">// 기존 선언 되있던대로 button tag</span>\r\n    <span class=\"token operator\">&lt;</span>Btn <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"a\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Btn<span class=\"token operator\">></span>  <span class=\"token comment\">// button 태그와 동일한 css를 가진 a태그</span>\r\n    <span class=\"token comment\">/* 아래 input tag는 모두 required 속성을 가진다*/</span>\r\n    <span class=\"token operator\">&lt;</span>Input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span>Input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span>Input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<h3 id=\"24-animations--pseudo-selectors\" style=\"position:relative;\"><a href=\"#24-animations--pseudo-selectors\" aria-label=\"24 animations  pseudo selectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.4 Animations &#x26; Pseudo Selectors</h3>\n<ul>\n<li><code class=\"language-text\">styled-components</code>를 이용해 animation과 pseudo selectors를 간편하게 작성 가능</li>\n<li>Component안의 element 쉽게 선택할 수 있다.</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\r\n<span class=\"token operator\">...</span>\r\n\r\n<span class=\"token keyword\">const</span> rotateAnimation <span class=\"token operator\">=</span> keyframes<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n  ...\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n  ...\r\n  animation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rotateAnimation<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 1s linear infinite;\r\n  ...\r\n  span {  /* Box Component inside span*/\r\n    font-size: 36px;\r\n    transition: font-size 1s;\r\n    &amp;:hover { /* pseudo selector */\r\n      font-size: 50px;\r\n    }\r\n  }\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">...</span>\r\n    <span class=\"token operator\">&lt;</span>Box<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"25-pseudo-selectors-part-two\" style=\"position:relative;\"><a href=\"#25-pseudo-selectors-part-two\" aria-label=\"25 pseudo selectors part two permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.5 Pseudo Selectors part Two</h3>\n<ul>\n<li>이전 강의에서 Component안의 element의 pseudo selector를 배웠다.</li>\n<li>여기선 Component안의 Component의 pseudo selector를 작성 해본다.</li>\n<li>이렇게 작성하면 Box안의 태그를 span에서 p로 바꾸고자 할 때 as를 사용하여 p로 쉽게 변경이 가능하다.</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Emoji <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>span<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n  font-size: 36px;\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> \r\n<span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n  ...\r\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Emoji<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:hover {\r\n    font-size: 50px;\r\n  }\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> \r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token operator\">&lt;</span>Box<span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span>Emoji<span class=\"token operator\">></span>😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Emoji<span class=\"token operator\">></span> <span class=\"token comment\">// 얘는 hover 됨</span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Box<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span>Emoji <span class=\"token keyword\">as</span><span class=\"token operator\">=</span><span class=\"token string\">\"p\"</span><span class=\"token operator\">></span>😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Emoji<span class=\"token operator\">></span> <span class=\"token comment\">// 얘는 Box Component안의 Emoji 아니라서 hover없음</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"theme\" style=\"position:relative;\"><a href=\"#theme\" aria-label=\"theme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>theme</h3>\n<ul>\n<li>light/dark모드 할 때 사용</li>\n<li>ThemeProvider를 이용하여 안에 둘러싸인 모든 Component는 ThemeProvider에 접근할 수 있다.</li>\n<li>light/dark 를 사용할 때, property들의 이름이 같아야 한다.</li>\n</ul>\n<h3 id=\"section-2-정리\" style=\"position:relative;\"><a href=\"#section-2-%EC%A0%95%EB%A6%AC\" aria-label=\"section 2 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Section 2. 정리</h3>\n<ul>\n<li><code class=\"language-text\">styled-components</code>를 사용하면 중복을 많이 줄일 수 있다.</li>\n<li><code class=\"language-text\">extend</code> 가능하다. - 컴포넌트의 모든 요소를 유지하면서 새로운 스타일 주는 것.</li>\n<li>props로 <code class=\"language-text\">as</code>를 전달하면 컴포넌트는 그대로이며 html tag만 변경 가능</li>\n<li><code class=\"language-text\">styled component</code>는 Component 안에 있는 element를 선택 가능하게 해준다. 또한 Component안의 Component도 선택 가능.</li>\n<li>이를 통해 같은 Component여도 어디서 사용되느냐에 따라 다른 selector가 가능</li>\n</ul>\n<br/>\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EA%B0%95%EC%9D%98-%EC%8B%9C%EC%9E%91\">1. 강의 시작</a></p>\n</li>\n<li>\n<p><a href=\"#2-section-2-styled-components\">2. Section 2. Styled Components</a></p>\n<ul>\n<li><a href=\"#2-1--22-adapting--extending\">#2-1 ~ 2.2 Adapting &#x26; Extending</a></li>\n<li><a href=\"#2-3-as-and-attrs\">#2-3 ‘as’ and Attrs</a></li>\n<li><a href=\"#24-animations--pseudo-selectors\">#2.4 Animations &#x26; Pseudo Selectors</a></li>\n<li><a href=\"#25-pseudo-selectors-part-two\">#2.5 Pseudo Selectors part Two</a></li>\n<li><a href=\"#theme\">theme</a></li>\n<li><a href=\"#section-2-%EC%A0%95%EB%A6%AC\">Section 2. 정리</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"노마드코더 - React JS 마스터클래스 1. 강의 시작 React JS 기초 강의를 듣고 Twitter Clone Coding 하려다가 어쩌다가 HTML/CSS/JS 기초 강의 다 듣고\r\n오느라 몇일 걸려서 이제 본격 React JS 마스터클래스를 시작하게 됐다. 이 강의는 Section별로 각기 다른 요소를 집중적으로 배우며 섹션을 진행할 때마다 복습 및 새로운것을 배운다\r\n그리고 마지막에는 배운것을 총 동원한 작은 프로젝트를 만들게 된다. 2. Section 2. Styled Components #2-1 ~ 2.2 Adapting & Extending styled components 설치 styled components를 import해서 사용 기본적으로 태그명 뒤에 “ 기호를 사용하여 그 사이에 기본 css문법과 똑같이 사용한다. 컴포넌트로서 Props로 색상 같은걸 동적으로 전달 가능 확장 가능 예시 #2-3 ‘as’ and Attrs 같은 스타일을 가진 다른 태그를 만들…","frontmatter":{"date":"January 30, 2022","title":"[React] React JS 마스터클래스#1","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-master-1/"}},"next":{"id":"cb48336a-8d95-5dbc-a7de-bdbb67d0f29b","html":"<h1 id=\"노마드코더---실전형-리액트-hooks-10개\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---%EC%8B%A4%EC%A0%84%ED%98%95-%EB%A6%AC%EC%95%A1%ED%8A%B8-hooks-10%EA%B0%9C\" aria-label=\"노마드코더   실전형 리액트 hooks 10개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-hooks-introduction/lobby\">노마드코더 - 실전형 리액트 Hooks 10개</a></h1>\n<h2 id=\"노트\" style=\"position:relative;\"><a href=\"#%EB%85%B8%ED%8A%B8\" aria-label=\"노트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노트</h2>\n<h3 id=\"21-usetitle\" style=\"position:relative;\"><a href=\"#21-usetitle\" aria-label=\"21 usetitle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.1 useTitle</h3>\n<ul>\n<li>홈페이지의 title을 update해주는 hook</li>\n</ul>\n<h3 id=\"22-useclick\" style=\"position:relative;\"><a href=\"#22-useclick\" aria-label=\"22 useclick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.2 useClick</h3>\n<ul>\n<li>element를 클릭 하는 기능을 넣을 때 사용하는 hook\r\nreference - component의 어떤 부분을 선택할 수 있는 방법\r\n<code class=\"language-text\">useRef</code> document.getElementById 같은 기능</li>\n</ul>\n<blockquote>\n<p>사용 예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inputRef<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 값 확인</span>\r\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputRef<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"blabla\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>useEffect를 return 받은 함수는 componentWillUnmount 때 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// componentWillUnmount 때 호출 </span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elementRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      elementRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"23-useconfirm--usepreventleave\" style=\"position:relative;\"><a href=\"#23-useconfirm--usepreventleave\" aria-label=\"23 useconfirm  usepreventleave permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.3 useConfirm &#x26; usePreventLeave</h3>\n<blockquote>\n<p>useConfirm</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">useConfirm</code> 사용자가 무언가를 하기 전에 확인해야 할 때 사용하는 Hook</li>\n</ul>\n<blockquote>\n<p>usePreventLeave</p>\n</blockquote>\n<ul>\n<li>웹 사이트 같은데서 작업이 완료되지 않았는데 window창을 닫으려 할 때 호출되는 Hook</li>\n<li><code class=\"language-text\">beforeunload</code> event는 window가 닫히기 전에 function이 실행되게 해준다.</li>\n</ul>\n<h3 id=\"24-usebeforeleave\" style=\"position:relative;\"><a href=\"#24-usebeforeleave\" aria-label=\"24 usebeforeleave permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.4 useBeforeLeave</h3>\n<ul>\n<li>기본적으로 탭을 닫으려고 페이지를 벗어나려 할 때 실행되는 Hook</li>\n<li></li>\n</ul>\n<h3 id=\"25-usefadein--usenetwork\" style=\"position:relative;\"><a href=\"#25-usefadein--usenetwork\" aria-label=\"25 usefadein  usenetwork permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.5 useFadeIn &#x26; useNetwork</h3>\n<blockquote>\n<p>useFadeIn</p>\n</blockquote>\n<ul>\n<li>자동으로 서서히 나타게 하는 함수 Hooks &#x26; Animation</li>\n<li><code class=\"language-text\">useFadeIn</code> 함수는 공부하기 좋은 듯?</li>\n</ul>\n<blockquote>\n<p>useNetwork</p>\n</blockquote>\n<ul>\n<li>useNetwork는 navigator가 online또는 offline 전환시 사용 할 Hook</li>\n</ul>\n<h3 id=\"26-usescroll--usefullscreen\" style=\"position:relative;\"><a href=\"#26-usescroll--usefullscreen\" aria-label=\"26 usescroll  usefullscreen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.6 useScroll &#x26; useFullscreen</h3>\n<blockquote>\n<p>useScroll</p>\n</blockquote>\n<ul>\n<li>스크롤 할 때 사용하는 Hook</li>\n</ul>\n<blockquote>\n<p>useFullscreen</p>\n</blockquote>\n<ul>\n<li>어떤 element를 얻어 fullscreen으로 만들어주는 Hook</li>\n</ul>\n<br/>\n<h3 id=\"27-usenotification\" style=\"position:relative;\"><a href=\"#27-usenotification\" aria-label=\"27 usenotification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.7 useNotification</h3>\n<ul>\n<li>알림 기능 Function, Notification API 사용</li>\n<li>user가 거부하면 다시 요청할 방법이 없다. 최초에 한번만 요청?</li>\n<li>option같은건 MDN 참조</li>\n</ul>\n<h3 id=\"28-useaxios\" style=\"position:relative;\"><a href=\"#28-useaxios\" aria-label=\"28 useaxios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#2.8 useAxios</h3>\n<ul>\n<li><code class=\"language-text\">axios</code> - node.js와 브라우저를 위한 Promise 기반 HTTP 클라이언트</li>\n</ul>\n<h2 id=\"publishing-to-npm\" style=\"position:relative;\"><a href=\"#publishing-to-npm\" aria-label=\"publishing to npm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publishing to NPM</h2>\n<ul>\n<li>\n<p>우선순위 공부 후에 다시 해볼 예정.</p>\n</li>\n<li>\n<p><a href=\"/posts/React\">React</a></p>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%85%B8%ED%8A%B8\">노트</a></p>\n<ul>\n<li><a href=\"#21-usetitle\">#2.1 useTitle</a></li>\n<li><a href=\"#22-useclick\">#2.2 useClick</a></li>\n<li><a href=\"#23-useconfirm--usepreventleave\">#2.3 useConfirm &#x26; usePreventLeave</a></li>\n<li><a href=\"#24-usebeforeleave\">#2.4 useBeforeLeave</a></li>\n<li><a href=\"#25-usefadein--usenetwork\">#2.5 useFadeIn &#x26; useNetwork</a></li>\n<li><a href=\"#26-usescroll--usefullscreen\">#2.6 useScroll &#x26; useFullscreen</a></li>\n<li><a href=\"#27-usenotification\">#2.7 useNotification</a></li>\n<li><a href=\"#28-useaxios\">#2.8 useAxios</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#publishing-to-npm\">Publishing to NPM</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 30, 2022","title":"[React] 리액트 Hooks#2","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-hooks-2/"}},"prev":{"id":"ff594cef-20ab-5121-87bd-dcc04025618f","html":"<h1 id=\"노마드코더---react-js-마스터클래스\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---react-js-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"노마드코더   react js 마스터클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-masterclass\">노마드코더 - React JS 마스터클래스</a></h1>\n<h2 id=\"1-section-3-type-script\" style=\"position:relative;\"><a href=\"#1-section-3-type-script\" aria-label=\"1 section 3 type script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Section 3. Type Script</h2>\n<ul>\n<li>기초는 배웠으므로 필요한거만 기록</li>\n</ul>\n<h3 id=\"optional-props\" style=\"position:relative;\"><a href=\"#optional-props\" aria-label=\"optional props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Props</h3>\n<ul>\n<li>Props를 선택적으로 주는 방법 및 Default 값 주는 예시를 살펴 본다.</li>\n<li>interface에서 props명 뒤에 ? 붙이면 option props가 된다.</li>\n<li>optional props 값을 Style component에 전달할 경우 필수 값인데 이때는 default 값 지정 한다.</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CircleProps</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  borderColor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// a</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContainerProps</span> <span class=\"token punctuation\">{</span>\r\n  bgColor<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n  borderColor<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// styled-componetn에  Type을 ContainerProps로 지정</span>\r\n<span class=\"token keyword\">const</span> Container <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>ContainerProps<span class=\"token operator\">></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> \r\n  ...\r\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span><span class=\"token operator\">=></span>props<span class=\"token punctuation\">.</span>bgColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\r\n  border-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span><span class=\"token operator\">=></span>props<span class=\"token punctuation\">.</span>borderColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\r\n</span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>bgColor<span class=\"token punctuation\">,</span> borderColor <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CircleProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>              <span class=\"token comment\">// 여기도 default 값 처리해주는 방법</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Container bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>bgColor<span class=\"token punctuation\">}</span> borderColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>borderColor <span class=\"token operator\">??</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// borderColor가 undefined라면 default 값 white</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token comment\">// borderColor은 Optional props 이다.</span>\r\n      <span class=\"token operator\">&lt;</span>Circle bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"teal\"</span><span class=\"token punctuation\">}</span> borderColor<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  \r\n      <span class=\"token operator\">&lt;</span>Circle bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"tomato\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  \r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"받아온-data-type-지정\" style=\"position:relative;\"><a href=\"#%EB%B0%9B%EC%95%84%EC%98%A8-data-type-%EC%A7%80%EC%A0%95\" aria-label=\"받아온 data type 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>받아온 Data Type 지정</h3>\n<ul>\n<li>받아온 데이터안에 object 즉 배열 같은게 있으면 그안에 데이터보고 지정 해줘야 되는게 단점.</li>\n</ul>\n<ol>\n<li>Object.keys(data).join() 해서 key string으로 만든다.</li>\n<li>Object.values(data).map(v=> typeof v).join()으로 type string으로 만든다.</li>\n<li>vs code에서 편집!</li>\n</ol>\n<h3 id=\"react-query\" style=\"position:relative;\"><a href=\"#react-query\" aria-label=\"react query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query</h3>\n<ul>\n<li>React 애플리케이션에서 서버 state를 fetching, caching, synchronizing, updating할 수 있도록 도와주는 라이브러리 이다.</li>\n<li><code class=\"language-text\">react query</code>를 사용하면 캐시에 데이터를 저장 해둔다. 즉 다른 페이지로 갔다 와도 원하는 data가 이미 캐시에 있다는 것을 알고 있어서 API에 접근하지 않는다.</li>\n</ul>\n<blockquote>\n<p>캐시데이터 확인</p>\n</blockquote>\n<ul>\n<li>App.tsx에 아래 코드를 추가하면 캐싱 데이터 확인 쉽게 가능.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactQueryDevtools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-query/devtools\"</span><span class=\"token punctuation\">;</span>  \r\n<span class=\"token operator\">&lt;</span>ReactQueryDevtools initialIsOpen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"apexchart-이용\" style=\"position:relative;\"><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\" aria-label=\"apexchart 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://apexcharts.com/docs/react-charts/\">ApexChart 이용</a></h3>\n<br/>\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-section-3-type-script\">1. Section 3. Type Script</a></p>\n<ul>\n<li><a href=\"#optional-props\">Optional Props</a></li>\n<li><a href=\"#%EB%B0%9B%EC%95%84%EC%98%A8-data-type-%EC%A7%80%EC%A0%95\">받아온 Data Type 지정</a></li>\n<li><a href=\"#react-query\">react-query</a></li>\n<li><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\">ApexChart 이용</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 31, 2022","title":"[React] React JS 마스터클래스#1","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-master-2/"}},"site":{"siteMetadata":{"siteUrl":"https://wjdrbdyd.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/react-study/react-master-1/","nextSlug":"/react-study/react-hooks-2/","prevSlug":"/react-study/react-master-2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}