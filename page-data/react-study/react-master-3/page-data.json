{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/react-study/react-master-3/",
    "result": {"data":{"cur":{"id":"e304f760-7ee0-5390-9261-669198b251ec","html":"<h1 id=\"노마드코더---react-js-마스터클래스\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---react-js-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"노마드코더   react js 마스터클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-masterclass\">노마드코더 - React JS 마스터클래스</a></h1>\n<h2 id=\"1-section-5-state-management---recoil\" style=\"position:relative;\"><a href=\"#1-section-5-state-management---recoil\" aria-label=\"1 section 5 state management   recoil permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Section 5. State Management - Recoil</h2>\n<ul>\n<li>global state - 어플리케이션 전체에서 공유되는 state (ex. user login)</li>\n</ul>\n<ul>\n<li>Atom은 상태(state)의 일부를 나타낸다. Atoms는 어떤 컴포넌트에서나 읽고 쓸 수 있다.</li>\n<li>Redux 와 Recoil 차이점 공부해두면 좋을 듯.</li>\n<li>컴포넌트가 atom의 값을 관찰 하기 시작할 때 atom이 변경되면 컴포넌트도 변경된 값으로 다시 리렌더링 된다.</li>\n<li>예시같은건 문서 확인 <a href=\"https://recoiljs.org/ko/\">Recoil</a></li>\n</ul>\n<h3 id=\"apexchart-이용\" style=\"position:relative;\"><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\" aria-label=\"apexchart 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://apexcharts.com/docs/react-charts/\">ApexChart 이용</a></h3>\n<h2 id=\"react-hook-form\" style=\"position:relative;\"><a href=\"#react-hook-form\" aria-label=\"react hook form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook Form</h2>\n<ul>\n<li>useForm 호출하여 register와 handleSubmit 을 받아 register 함수를 form에 있는 모든 input에서 호출 validation 설정은</li>\n</ul>\n<p>예를 들어 required:true or required:“error message” 와 같이 작성\r\n자세한 내용은 github source 또는 <a href=\"https://react-hook-form.com/\"><code class=\"language-text\">react-form-hook</code></a> 확인</p>\n<br/>\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-section-5-state-management---recoil\">1. Section 5. State Management - Recoil</a></p>\n<ul>\n<li><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\">ApexChart 이용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react-hook-form\">React Hook Form</a></p>\n</li>\n</ul>\n</div>","excerpt":"노마드코더 - React JS 마스터클래스 1. Section 5. State Management - Recoil global state - 어플리케이션 전체에서 공유되는 state (ex. user login) Atom은 상태(state)의 일부를 나타낸다. Atoms는 어떤 컴포넌트에서나 읽고 쓸 수 있다. Redux 와 Recoil 차이점 공부해두면 좋을 듯. 컴포넌트가 atom의 값을 관찰 하기 시작할 때 atom이 변경되면 컴포넌트도 변경된 값으로 다시 리렌더링 된다. 예시같은건 문서 확인 Recoil ApexChart 이용 React Hook Form useForm 호출하여 register와 handleSubmit 을 받아 register 함수를 form에 있는 모든 input에서 호출 validation 설정은 예를 들어 required:true or required:“error message” 와 같이 작성\r\n자세한 내용은 github source 또는  확인 Rea…","frontmatter":{"date":"February 01, 2022","title":"[React] React JS 마스터클래스#3","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-master-3/"}},"next":{"id":"ff594cef-20ab-5121-87bd-dcc04025618f","html":"<h1 id=\"노마드코더---react-js-마스터클래스\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---react-js-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"노마드코더   react js 마스터클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-masterclass\">노마드코더 - React JS 마스터클래스</a></h1>\n<h2 id=\"1-section-3-type-script\" style=\"position:relative;\"><a href=\"#1-section-3-type-script\" aria-label=\"1 section 3 type script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Section 3. Type Script</h2>\n<ul>\n<li>기초는 배웠으므로 필요한거만 기록</li>\n</ul>\n<h3 id=\"optional-props\" style=\"position:relative;\"><a href=\"#optional-props\" aria-label=\"optional props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Props</h3>\n<ul>\n<li>Props를 선택적으로 주는 방법 및 Default 값 주는 예시를 살펴 본다.</li>\n<li>interface에서 props명 뒤에 ? 붙이면 option props가 된다.</li>\n<li>optional props 값을 Style component에 전달할 경우 필수 값인데 이때는 default 값 지정 한다.</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CircleProps</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  borderColor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// a</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContainerProps</span> <span class=\"token punctuation\">{</span>\r\n  bgColor<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n  borderColor<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// styled-componetn에  Type을 ContainerProps로 지정</span>\r\n<span class=\"token keyword\">const</span> Container <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token operator\">&lt;</span>ContainerProps<span class=\"token operator\">></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> \r\n  ...\r\n  background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token operator\">=></span>props<span class=\"token punctuation\">.</span>bgColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\r\n  border-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token operator\">=></span>props<span class=\"token punctuation\">.</span>borderColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\r\n</span><span class=\"token template-punctuation string\">`</span></span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>bgColor<span class=\"token punctuation\">,</span> borderColor <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CircleProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>              <span class=\"token comment\">// 여기도 default 값 처리해주는 방법</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Container bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>bgColor<span class=\"token punctuation\">}</span> borderColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>borderColor <span class=\"token operator\">??</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// borderColor가 undefined라면 default 값 white</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n      <span class=\"token comment\">// borderColor은 Optional props 이다.</span>\r\n      <span class=\"token operator\">&lt;</span>Circle bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"teal\"</span><span class=\"token punctuation\">}</span> borderColor<span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  \r\n      <span class=\"token operator\">&lt;</span>Circle bgColor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"tomato\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  \r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"받아온-data-type-지정\" style=\"position:relative;\"><a href=\"#%EB%B0%9B%EC%95%84%EC%98%A8-data-type-%EC%A7%80%EC%A0%95\" aria-label=\"받아온 data type 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>받아온 Data Type 지정</h3>\n<ul>\n<li>받아온 데이터안에 object 즉 배열 같은게 있으면 그안에 데이터보고 지정 해줘야 되는게 단점.</li>\n</ul>\n<ol>\n<li>Object.keys(data).join() 해서 key string으로 만든다.</li>\n<li>Object.values(data).map(v=> typeof v).join()으로 type string으로 만든다.</li>\n<li>vs code에서 편집!</li>\n</ol>\n<h3 id=\"react-query\" style=\"position:relative;\"><a href=\"#react-query\" aria-label=\"react query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query</h3>\n<ul>\n<li>React 애플리케이션에서 서버 state를 fetching, caching, synchronizing, updating할 수 있도록 도와주는 라이브러리 이다.</li>\n<li><code class=\"language-text\">react query</code>를 사용하면 캐시에 데이터를 저장 해둔다. 즉 다른 페이지로 갔다 와도 원하는 data가 이미 캐시에 있다는 것을 알고 있어서 API에 접근하지 않는다.</li>\n</ul>\n<blockquote>\n<p>캐시데이터 확인</p>\n</blockquote>\n<ul>\n<li>App.tsx에 아래 코드를 추가하면 캐싱 데이터 확인 쉽게 가능.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReactQueryDevtools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-query/devtools\"</span><span class=\"token punctuation\">;</span>  \r\n<span class=\"token operator\">&lt;</span>ReactQueryDevtools initialIsOpen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"apexchart-이용\" style=\"position:relative;\"><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\" aria-label=\"apexchart 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://apexcharts.com/docs/react-charts/\">ApexChart 이용</a></h3>\n<br/>\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-section-3-type-script\">1. Section 3. Type Script</a></p>\n<ul>\n<li><a href=\"#optional-props\">Optional Props</a></li>\n<li><a href=\"#%EB%B0%9B%EC%95%84%EC%98%A8-data-type-%EC%A7%80%EC%A0%95\">받아온 Data Type 지정</a></li>\n<li><a href=\"#react-query\">react-query</a></li>\n<li><a href=\"#apexchart-%EC%9D%B4%EC%9A%A9\">ApexChart 이용</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 31, 2022","title":"[React] React JS 마스터클래스#1","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-master-2/"}},"prev":{"id":"20577b9d-9a80-5f9d-9a67-b2f5de908660","html":"<h1 id=\"노마드코더---react-js-마스터클래스\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94---react-js-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"노마드코더   react js 마스터클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://nomadcoders.co/react-masterclass\">노마드코더 - React JS 마스터클래스</a></h1>\n<h2 id=\"1-recoil-selector\" style=\"position:relative;\"><a href=\"#1-recoil-selector\" aria-label=\"1 recoil selector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Recoil selector</h2>\n<ul>\n<li><code class=\"language-text\">selector</code>는 state자체를 바꾸지 않고 원하는 방식으로 atom의 output을 변형시키는 도구</li>\n</ul>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<ul>\n<li>하나의 atom으로 selector를 이용하여 category별로 데이터를 보여주는 예시</li>\n</ul>\n<ul>\n<li>atom.ts</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IToDo</span> <span class=\"token punctuation\">{</span>\r\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n  category<span class=\"token operator\">:</span> <span class=\"token string\">\"TO_DO\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"DOING\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"DONE\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> toDoState <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">atom</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IToDo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"toDo\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// selector</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> toDoSelector <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"toDoSelector\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> toDos <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>toDoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\r\n      toDos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toDo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> toDo<span class=\"token punctuation\">.</span>category <span class=\"token operator\">===</span> <span class=\"token string\">\"TO_DO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      toDos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toDo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> toDo<span class=\"token punctuation\">.</span>category <span class=\"token operator\">===</span> <span class=\"token string\">\"DOING\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      toDos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toDo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> toDo<span class=\"token punctuation\">.</span>category <span class=\"token operator\">===</span> <span class=\"token string\">\"DONE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>ToDoList.tsx</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ToDoList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// const toDos = useRecoilValue(toDoState);</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toDo<span class=\"token punctuation\">,</span> doing<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>toDoSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token comment\">//toDo</span>\r\n  <span class=\"token punctuation\">{</span>toDo<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>toDo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>ToDo key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toDo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>toDo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"selector-get-set\" style=\"position:relative;\"><a href=\"#selector-get-set\" aria-label=\"selector get set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>selector get, set</h4>\n<ul>\n<li>위에서 get은 다뤘으나 set은 다루지 않아 추가적인 예시 이다. 이 예시는 <code class=\"language-text\">minutes</code> atom으로 selector의 get을 이용해 <code class=\"language-text\">hours</code>를 표현하고 set을 이용해 <code class=\"language-text\">hours</code>를 <code class=\"language-text\">minutes</code>로 나타내는 예시이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> minutesState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hoursSelector <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">selector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> minutes <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minutesState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> minutes <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> set <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> minutes <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>minutesState<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>minutes<span class=\"token punctuation\">,</span> setMinutes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>minutesState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>hours<span class=\"token punctuation\">,</span> setHours<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>hoursSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMinutesChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setMinutes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onHoursChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FormEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>minutes<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMinutesChange<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Minutes\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hours<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onHoursChange<span class=\"token punctuation\">}</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Hours\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<ul>\n<li><a href=\"/posts/React\">React</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-recoil-selector\">1. Recoil selector</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#selector-get-set\">selector get, set</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 02, 2022","title":"[React] React JS 마스터클래스#4","categories":"React","author":"정굥","emoji":"🧢"},"fields":{"slug":"/react-study/react-master-4/"}},"site":{"siteMetadata":{"siteUrl":"https://wjdrbdyd.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/react-study/react-master-3/","nextSlug":"/react-study/react-master-2/","prevSlug":"/react-study/react-master-4/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}